# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import vimagemodule
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = vimagemodule.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return vimagemodule.PySwigIterator_value(*args)
    def incr(*args): return vimagemodule.PySwigIterator_incr(*args)
    def decr(*args): return vimagemodule.PySwigIterator_decr(*args)
    def distance(*args): return vimagemodule.PySwigIterator_distance(*args)
    def equal(*args): return vimagemodule.PySwigIterator_equal(*args)
    def copy(*args): return vimagemodule.PySwigIterator_copy(*args)
    def next(*args): return vimagemodule.PySwigIterator_next(*args)
    def previous(*args): return vimagemodule.PySwigIterator_previous(*args)
    def advance(*args): return vimagemodule.PySwigIterator_advance(*args)
    def __eq__(*args): return vimagemodule.PySwigIterator___eq__(*args)
    def __ne__(*args): return vimagemodule.PySwigIterator___ne__(*args)
    def __iadd__(*args): return vimagemodule.PySwigIterator___iadd__(*args)
    def __isub__(*args): return vimagemodule.PySwigIterator___isub__(*args)
    def __add__(*args): return vimagemodule.PySwigIterator___add__(*args)
    def __sub__(*args): return vimagemodule.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = vimagemodule.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import VError
import VMask
import VDisplay
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return vimagemodule.IntVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return vimagemodule.IntVector___nonzero__(*args)
    def __len__(*args): return vimagemodule.IntVector___len__(*args)
    def pop(*args): return vimagemodule.IntVector_pop(*args)
    def __getslice__(*args): return vimagemodule.IntVector___getslice__(*args)
    def __setslice__(*args): return vimagemodule.IntVector___setslice__(*args)
    def __delslice__(*args): return vimagemodule.IntVector___delslice__(*args)
    def __delitem__(*args): return vimagemodule.IntVector___delitem__(*args)
    def __getitem__(*args): return vimagemodule.IntVector___getitem__(*args)
    def __setitem__(*args): return vimagemodule.IntVector___setitem__(*args)
    def append(*args): return vimagemodule.IntVector_append(*args)
    def empty(*args): return vimagemodule.IntVector_empty(*args)
    def size(*args): return vimagemodule.IntVector_size(*args)
    def clear(*args): return vimagemodule.IntVector_clear(*args)
    def swap(*args): return vimagemodule.IntVector_swap(*args)
    def get_allocator(*args): return vimagemodule.IntVector_get_allocator(*args)
    def begin(*args): return vimagemodule.IntVector_begin(*args)
    def end(*args): return vimagemodule.IntVector_end(*args)
    def rbegin(*args): return vimagemodule.IntVector_rbegin(*args)
    def rend(*args): return vimagemodule.IntVector_rend(*args)
    def pop_back(*args): return vimagemodule.IntVector_pop_back(*args)
    def erase(*args): return vimagemodule.IntVector_erase(*args)
    def __init__(self, *args): 
        this = vimagemodule.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return vimagemodule.IntVector_push_back(*args)
    def front(*args): return vimagemodule.IntVector_front(*args)
    def back(*args): return vimagemodule.IntVector_back(*args)
    def assign(*args): return vimagemodule.IntVector_assign(*args)
    def resize(*args): return vimagemodule.IntVector_resize(*args)
    def insert(*args): return vimagemodule.IntVector_insert(*args)
    def reserve(*args): return vimagemodule.IntVector_reserve(*args)
    def capacity(*args): return vimagemodule.IntVector_capacity(*args)
    __swig_destroy__ = vimagemodule.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = vimagemodule.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return vimagemodule.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return vimagemodule.DoubleVector___nonzero__(*args)
    def __len__(*args): return vimagemodule.DoubleVector___len__(*args)
    def pop(*args): return vimagemodule.DoubleVector_pop(*args)
    def __getslice__(*args): return vimagemodule.DoubleVector___getslice__(*args)
    def __setslice__(*args): return vimagemodule.DoubleVector___setslice__(*args)
    def __delslice__(*args): return vimagemodule.DoubleVector___delslice__(*args)
    def __delitem__(*args): return vimagemodule.DoubleVector___delitem__(*args)
    def __getitem__(*args): return vimagemodule.DoubleVector___getitem__(*args)
    def __setitem__(*args): return vimagemodule.DoubleVector___setitem__(*args)
    def append(*args): return vimagemodule.DoubleVector_append(*args)
    def empty(*args): return vimagemodule.DoubleVector_empty(*args)
    def size(*args): return vimagemodule.DoubleVector_size(*args)
    def clear(*args): return vimagemodule.DoubleVector_clear(*args)
    def swap(*args): return vimagemodule.DoubleVector_swap(*args)
    def get_allocator(*args): return vimagemodule.DoubleVector_get_allocator(*args)
    def begin(*args): return vimagemodule.DoubleVector_begin(*args)
    def end(*args): return vimagemodule.DoubleVector_end(*args)
    def rbegin(*args): return vimagemodule.DoubleVector_rbegin(*args)
    def rend(*args): return vimagemodule.DoubleVector_rend(*args)
    def pop_back(*args): return vimagemodule.DoubleVector_pop_back(*args)
    def erase(*args): return vimagemodule.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = vimagemodule.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return vimagemodule.DoubleVector_push_back(*args)
    def front(*args): return vimagemodule.DoubleVector_front(*args)
    def back(*args): return vimagemodule.DoubleVector_back(*args)
    def assign(*args): return vimagemodule.DoubleVector_assign(*args)
    def resize(*args): return vimagemodule.DoubleVector_resize(*args)
    def insert(*args): return vimagemodule.DoubleVector_insert(*args)
    def reserve(*args): return vimagemodule.DoubleVector_reserve(*args)
    def capacity(*args): return vimagemodule.DoubleVector_capacity(*args)
    __swig_destroy__ = vimagemodule.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = vimagemodule.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class ImageVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return vimagemodule.ImageVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return vimagemodule.ImageVector___nonzero__(*args)
    def __len__(*args): return vimagemodule.ImageVector___len__(*args)
    def pop(*args): return vimagemodule.ImageVector_pop(*args)
    def __getslice__(*args): return vimagemodule.ImageVector___getslice__(*args)
    def __setslice__(*args): return vimagemodule.ImageVector___setslice__(*args)
    def __delslice__(*args): return vimagemodule.ImageVector___delslice__(*args)
    def __delitem__(*args): return vimagemodule.ImageVector___delitem__(*args)
    def __getitem__(*args): return vimagemodule.ImageVector___getitem__(*args)
    def __setitem__(*args): return vimagemodule.ImageVector___setitem__(*args)
    def append(*args): return vimagemodule.ImageVector_append(*args)
    def empty(*args): return vimagemodule.ImageVector_empty(*args)
    def size(*args): return vimagemodule.ImageVector_size(*args)
    def clear(*args): return vimagemodule.ImageVector_clear(*args)
    def swap(*args): return vimagemodule.ImageVector_swap(*args)
    def get_allocator(*args): return vimagemodule.ImageVector_get_allocator(*args)
    def begin(*args): return vimagemodule.ImageVector_begin(*args)
    def end(*args): return vimagemodule.ImageVector_end(*args)
    def rbegin(*args): return vimagemodule.ImageVector_rbegin(*args)
    def rend(*args): return vimagemodule.ImageVector_rend(*args)
    def pop_back(*args): return vimagemodule.ImageVector_pop_back(*args)
    def erase(*args): return vimagemodule.ImageVector_erase(*args)
    def __init__(self, *args): 
        this = vimagemodule.new_ImageVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return vimagemodule.ImageVector_push_back(*args)
    def front(*args): return vimagemodule.ImageVector_front(*args)
    def back(*args): return vimagemodule.ImageVector_back(*args)
    def assign(*args): return vimagemodule.ImageVector_assign(*args)
    def resize(*args): return vimagemodule.ImageVector_resize(*args)
    def insert(*args): return vimagemodule.ImageVector_insert(*args)
    def reserve(*args): return vimagemodule.ImageVector_reserve(*args)
    def capacity(*args): return vimagemodule.ImageVector_capacity(*args)
    __swig_destroy__ = vimagemodule.delete_ImageVector
    __del__ = lambda self : None;
ImageVector_swigregister = vimagemodule.ImageVector_swigregister
ImageVector_swigregister(ImageVector)

class VImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VImage, name)
    __repr__ = _swig_repr
    __swig_getmethods__["print_all"] = lambda x: vimagemodule.VImage_print_all
    if _newclass:print_all = staticmethod(vimagemodule.VImage_print_all)
    MULTIBAND = vimagemodule.VImage_MULTIBAND
    B_W = vimagemodule.VImage_B_W
    LUMINACE = vimagemodule.VImage_LUMINACE
    XRAY = vimagemodule.VImage_XRAY
    IR = vimagemodule.VImage_IR
    YUV = vimagemodule.VImage_YUV
    RED_ONLY = vimagemodule.VImage_RED_ONLY
    GREEN_ONLY = vimagemodule.VImage_GREEN_ONLY
    BLUE_ONLY = vimagemodule.VImage_BLUE_ONLY
    POWER_SPECTRUM = vimagemodule.VImage_POWER_SPECTRUM
    HISTOGRAM = vimagemodule.VImage_HISTOGRAM
    LUT = vimagemodule.VImage_LUT
    XYZ = vimagemodule.VImage_XYZ
    LAB = vimagemodule.VImage_LAB
    CMC = vimagemodule.VImage_CMC
    CMYK = vimagemodule.VImage_CMYK
    LABQ = vimagemodule.VImage_LABQ
    RGB = vimagemodule.VImage_RGB
    UCS = vimagemodule.VImage_UCS
    LCH = vimagemodule.VImage_LCH
    LABS = vimagemodule.VImage_LABS
    sRGB = vimagemodule.VImage_sRGB
    YXY = vimagemodule.VImage_YXY
    FOURIER = vimagemodule.VImage_FOURIER
    RGB16 = vimagemodule.VImage_RGB16
    GREY16 = vimagemodule.VImage_GREY16
    FMTNOTSET = vimagemodule.VImage_FMTNOTSET
    FMTUCHAR = vimagemodule.VImage_FMTUCHAR
    FMTCHAR = vimagemodule.VImage_FMTCHAR
    FMTUSHORT = vimagemodule.VImage_FMTUSHORT
    FMTSHORT = vimagemodule.VImage_FMTSHORT
    FMTUINT = vimagemodule.VImage_FMTUINT
    FMTINT = vimagemodule.VImage_FMTINT
    FMTFLOAT = vimagemodule.VImage_FMTFLOAT
    FMTCOMPLEX = vimagemodule.VImage_FMTCOMPLEX
    FMTDOUBLE = vimagemodule.VImage_FMTDOUBLE
    FMTDPCOMPLEX = vimagemodule.VImage_FMTDPCOMPLEX
    NOCODING = vimagemodule.VImage_NOCODING
    COLQUANT = vimagemodule.VImage_COLQUANT
    LABPACK = vimagemodule.VImage_LABPACK
    LABPACK_COMPRESSED = vimagemodule.VImage_LABPACK_COMPRESSED
    RGB_COMPRESSED = vimagemodule.VImage_RGB_COMPRESSED
    LUM_COMPRESSED = vimagemodule.VImage_LUM_COMPRESSED
    NO_COMPRESSION = vimagemodule.VImage_NO_COMPRESSION
    TCSF_COMPRESSION = vimagemodule.VImage_TCSF_COMPRESSION
    JPEG_COMPRESSION = vimagemodule.VImage_JPEG_COMPRESSION
    __swig_getmethods__["convert2disc"] = lambda x: vimagemodule.VImage_convert2disc
    if _newclass:convert2disc = staticmethod(vimagemodule.VImage_convert2disc)
    def __init__(self, *args): 
        this = vimagemodule.new_VImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def __assign__(*args): return vimagemodule.VImage___assign__(*args)
    __swig_destroy__ = vimagemodule.delete_VImage
    __del__ = lambda self : None;
    def image(*args): return vimagemodule.VImage_image(*args)
    def data(*args): return vimagemodule.VImage_data(*args)
    def write(*args): return vimagemodule.VImage_write(*args)
    def debug_print(*args): return vimagemodule.VImage_debug_print(*args)
    def Xsize(*args): return vimagemodule.VImage_Xsize(*args)
    def Ysize(*args): return vimagemodule.VImage_Ysize(*args)
    def Bands(*args): return vimagemodule.VImage_Bands(*args)
    def BandFmt(*args): return vimagemodule.VImage_BandFmt(*args)
    def Coding(*args): return vimagemodule.VImage_Coding(*args)
    def Type(*args): return vimagemodule.VImage_Type(*args)
    def Xres(*args): return vimagemodule.VImage_Xres(*args)
    def Yres(*args): return vimagemodule.VImage_Yres(*args)
    def Length(*args): return vimagemodule.VImage_Length(*args)
    def Compression(*args): return vimagemodule.VImage_Compression(*args)
    def Level(*args): return vimagemodule.VImage_Level(*args)
    def Xoffset(*args): return vimagemodule.VImage_Xoffset(*args)
    def Yoffset(*args): return vimagemodule.VImage_Yoffset(*args)
    def filename(*args): return vimagemodule.VImage_filename(*args)
    def Hist(*args): return vimagemodule.VImage_Hist(*args)
    def meta_get_int(*args): return vimagemodule.VImage_meta_get_int(*args)
    def meta_get_double(*args): return vimagemodule.VImage_meta_get_double(*args)
    def meta_get_string(*args): return vimagemodule.VImage_meta_get_string(*args)
    def meta_get_area(*args): return vimagemodule.VImage_meta_get_area(*args)
    def meta_get_blob(*args): return vimagemodule.VImage_meta_get_blob(*args)
    def meta_set(*args): return vimagemodule.VImage_meta_set(*args)
    def initdesc(*args): return vimagemodule.VImage_initdesc(*args)
    def estpar(*args): return vimagemodule.VImage_estpar(*args)
    def transform(*args): return vimagemodule.VImage_transform(*args)
    def transform_search(*args): return vimagemodule.VImage_transform_search(*args)
    def abs(*args): return vimagemodule.VImage_abs(*args)
    def acos(*args): return vimagemodule.VImage_acos(*args)
    def add(*args): return vimagemodule.VImage_add(*args)
    def asin(*args): return vimagemodule.VImage_asin(*args)
    def atan(*args): return vimagemodule.VImage_atan(*args)
    def avg(*args): return vimagemodule.VImage_avg(*args)
    def point_bilinear(*args): return vimagemodule.VImage_point_bilinear(*args)
    def bandmean(*args): return vimagemodule.VImage_bandmean(*args)
    def ceil(*args): return vimagemodule.VImage_ceil(*args)
    def cmulnorm(*args): return vimagemodule.VImage_cmulnorm(*args)
    def cos(*args): return vimagemodule.VImage_cos(*args)
    def cross_phase(*args): return vimagemodule.VImage_cross_phase(*args)
    def deviate(*args): return vimagemodule.VImage_deviate(*args)
    def divide(*args): return vimagemodule.VImage_divide(*args)
    def exp10(*args): return vimagemodule.VImage_exp10(*args)
    def expn(*args): return vimagemodule.VImage_expn(*args)
    def exp(*args): return vimagemodule.VImage_exp(*args)
    def fav4(*args): return vimagemodule.VImage_fav4(*args)
    def floor(*args): return vimagemodule.VImage_floor(*args)
    def gadd(*args): return vimagemodule.VImage_gadd(*args)
    def invert(*args): return vimagemodule.VImage_invert(*args)
    __swig_getmethods__["linreg"] = lambda x: vimagemodule.VImage_linreg
    if _newclass:linreg = staticmethod(vimagemodule.VImage_linreg)
    def lin(*args): return vimagemodule.VImage_lin(*args)
    def litecor(*args): return vimagemodule.VImage_litecor(*args)
    def log10(*args): return vimagemodule.VImage_log10(*args)
    def log(*args): return vimagemodule.VImage_log(*args)
    def max(*args): return vimagemodule.VImage_max(*args)
    def maxpos(*args): return vimagemodule.VImage_maxpos(*args)
    def maxpos_avg(*args): return vimagemodule.VImage_maxpos_avg(*args)
    def measure(*args): return vimagemodule.VImage_measure(*args)
    def min(*args): return vimagemodule.VImage_min(*args)
    def minpos(*args): return vimagemodule.VImage_minpos(*args)
    def multiply(*args): return vimagemodule.VImage_multiply(*args)
    def pow(*args): return vimagemodule.VImage_pow(*args)
    def remainder(*args): return vimagemodule.VImage_remainder(*args)
    def rint(*args): return vimagemodule.VImage_rint(*args)
    def sign(*args): return vimagemodule.VImage_sign(*args)
    def sin(*args): return vimagemodule.VImage_sin(*args)
    def stats(*args): return vimagemodule.VImage_stats(*args)
    def subtract(*args): return vimagemodule.VImage_subtract(*args)
    def tan(*args): return vimagemodule.VImage_tan(*args)
    def andimage(*args): return vimagemodule.VImage_andimage(*args)
    def orimage(*args): return vimagemodule.VImage_orimage(*args)
    def eorimage(*args): return vimagemodule.VImage_eorimage(*args)
    def shiftleft(*args): return vimagemodule.VImage_shiftleft(*args)
    def shiftright(*args): return vimagemodule.VImage_shiftright(*args)
    def greyc(*args): return vimagemodule.VImage_greyc(*args)
    def greyc_mask(*args): return vimagemodule.VImage_greyc_mask(*args)
    def LCh2Lab(*args): return vimagemodule.VImage_LCh2Lab(*args)
    def LCh2UCS(*args): return vimagemodule.VImage_LCh2UCS(*args)
    def Lab2LCh(*args): return vimagemodule.VImage_Lab2LCh(*args)
    def Lab2LabQ(*args): return vimagemodule.VImage_Lab2LabQ(*args)
    def Lab2LabS(*args): return vimagemodule.VImage_Lab2LabS(*args)
    def Lab2UCS(*args): return vimagemodule.VImage_Lab2UCS(*args)
    def Lab2XYZ(*args): return vimagemodule.VImage_Lab2XYZ(*args)
    def Lab2XYZ_temp(*args): return vimagemodule.VImage_Lab2XYZ_temp(*args)
    def Lab2disp(*args): return vimagemodule.VImage_Lab2disp(*args)
    def LabQ2LabS(*args): return vimagemodule.VImage_LabQ2LabS(*args)
    def LabQ2Lab(*args): return vimagemodule.VImage_LabQ2Lab(*args)
    def LabQ2XYZ(*args): return vimagemodule.VImage_LabQ2XYZ(*args)
    def LabQ2disp(*args): return vimagemodule.VImage_LabQ2disp(*args)
    def LabS2LabQ(*args): return vimagemodule.VImage_LabS2LabQ(*args)
    def LabS2Lab(*args): return vimagemodule.VImage_LabS2Lab(*args)
    def UCS2LCh(*args): return vimagemodule.VImage_UCS2LCh(*args)
    def UCS2Lab(*args): return vimagemodule.VImage_UCS2Lab(*args)
    def UCS2XYZ(*args): return vimagemodule.VImage_UCS2XYZ(*args)
    def XYZ2Lab(*args): return vimagemodule.VImage_XYZ2Lab(*args)
    def XYZ2Lab_temp(*args): return vimagemodule.VImage_XYZ2Lab_temp(*args)
    def XYZ2UCS(*args): return vimagemodule.VImage_XYZ2UCS(*args)
    def XYZ2Yxy(*args): return vimagemodule.VImage_XYZ2Yxy(*args)
    def XYZ2disp(*args): return vimagemodule.VImage_XYZ2disp(*args)
    def XYZ2sRGB(*args): return vimagemodule.VImage_XYZ2sRGB(*args)
    def Yxy2XYZ(*args): return vimagemodule.VImage_Yxy2XYZ(*args)
    def dE00_fromLab(*args): return vimagemodule.VImage_dE00_fromLab(*args)
    def dECMC_fromLab(*args): return vimagemodule.VImage_dECMC_fromLab(*args)
    def dECMC_fromdisp(*args): return vimagemodule.VImage_dECMC_fromdisp(*args)
    def dE_fromLab(*args): return vimagemodule.VImage_dE_fromLab(*args)
    def dE_fromXYZ(*args): return vimagemodule.VImage_dE_fromXYZ(*args)
    def dE_fromdisp(*args): return vimagemodule.VImage_dE_fromdisp(*args)
    def disp2Lab(*args): return vimagemodule.VImage_disp2Lab(*args)
    def disp2XYZ(*args): return vimagemodule.VImage_disp2XYZ(*args)
    def icc_ac2rc(*args): return vimagemodule.VImage_icc_ac2rc(*args)
    def icc_export(*args): return vimagemodule.VImage_icc_export(*args)
    def icc_export_depth(*args): return vimagemodule.VImage_icc_export_depth(*args)
    def icc_import(*args): return vimagemodule.VImage_icc_import(*args)
    def icc_import_embedded(*args): return vimagemodule.VImage_icc_import_embedded(*args)
    def icc_transform(*args): return vimagemodule.VImage_icc_transform(*args)
    def lab_morph(*args): return vimagemodule.VImage_lab_morph(*args)
    def sRGB2XYZ(*args): return vimagemodule.VImage_sRGB2XYZ(*args)
    def bandjoin(*args): return vimagemodule.VImage_bandjoin(*args)
    __swig_getmethods__["black"] = lambda x: vimagemodule.VImage_black
    if _newclass:black = staticmethod(vimagemodule.VImage_black)
    def c2amph(*args): return vimagemodule.VImage_c2amph(*args)
    def c2imag(*args): return vimagemodule.VImage_c2imag(*args)
    def c2ps(*args): return vimagemodule.VImage_c2ps(*args)
    def c2real(*args): return vimagemodule.VImage_c2real(*args)
    def c2rect(*args): return vimagemodule.VImage_c2rect(*args)
    def clip2c(*args): return vimagemodule.VImage_clip2c(*args)
    def clip2cm(*args): return vimagemodule.VImage_clip2cm(*args)
    def clip2d(*args): return vimagemodule.VImage_clip2d(*args)
    def clip2dcm(*args): return vimagemodule.VImage_clip2dcm(*args)
    def clip2f(*args): return vimagemodule.VImage_clip2f(*args)
    def clip2fmt(*args): return vimagemodule.VImage_clip2fmt(*args)
    def clip2i(*args): return vimagemodule.VImage_clip2i(*args)
    def clip2s(*args): return vimagemodule.VImage_clip2s(*args)
    def clip2ui(*args): return vimagemodule.VImage_clip2ui(*args)
    def clip2us(*args): return vimagemodule.VImage_clip2us(*args)
    def clip(*args): return vimagemodule.VImage_clip(*args)
    def copy(*args): return vimagemodule.VImage_copy(*args)
    def copy_morph(*args): return vimagemodule.VImage_copy_morph(*args)
    def copy_swap(*args): return vimagemodule.VImage_copy_swap(*args)
    def copy_set(*args): return vimagemodule.VImage_copy_set(*args)
    __swig_getmethods__["csv2vips"] = lambda x: vimagemodule.VImage_csv2vips
    if _newclass:csv2vips = staticmethod(vimagemodule.VImage_csv2vips)
    def extract_area(*args): return vimagemodule.VImage_extract_area(*args)
    def extract_areabands(*args): return vimagemodule.VImage_extract_areabands(*args)
    def extract_band(*args): return vimagemodule.VImage_extract_band(*args)
    def extract_bands(*args): return vimagemodule.VImage_extract_bands(*args)
    def extract(*args): return vimagemodule.VImage_extract(*args)
    def falsecolour(*args): return vimagemodule.VImage_falsecolour(*args)
    def fliphor(*args): return vimagemodule.VImage_fliphor(*args)
    def flipver(*args): return vimagemodule.VImage_flipver(*args)
    __swig_getmethods__["gbandjoin"] = lambda x: vimagemodule.VImage_gbandjoin
    if _newclass:gbandjoin = staticmethod(vimagemodule.VImage_gbandjoin)
    def grid(*args): return vimagemodule.VImage_grid(*args)
    def insert(*args): return vimagemodule.VImage_insert(*args)
    def insert_noexpand(*args): return vimagemodule.VImage_insert_noexpand(*args)
    __swig_getmethods__["jpeg2vips"] = lambda x: vimagemodule.VImage_jpeg2vips
    if _newclass:jpeg2vips = staticmethod(vimagemodule.VImage_jpeg2vips)
    def lrjoin(*args): return vimagemodule.VImage_lrjoin(*args)
    __swig_getmethods__["magick2vips"] = lambda x: vimagemodule.VImage_magick2vips
    if _newclass:magick2vips = staticmethod(vimagemodule.VImage_magick2vips)
    __swig_getmethods__["mask2vips"] = lambda x: vimagemodule.VImage_mask2vips
    if _newclass:mask2vips = staticmethod(vimagemodule.VImage_mask2vips)
    def msb(*args): return vimagemodule.VImage_msb(*args)
    def msb_band(*args): return vimagemodule.VImage_msb_band(*args)
    __swig_getmethods__["png2vips"] = lambda x: vimagemodule.VImage_png2vips
    if _newclass:png2vips = staticmethod(vimagemodule.VImage_png2vips)
    __swig_getmethods__["exr2vips"] = lambda x: vimagemodule.VImage_exr2vips
    if _newclass:exr2vips = staticmethod(vimagemodule.VImage_exr2vips)
    __swig_getmethods__["ppm2vips"] = lambda x: vimagemodule.VImage_ppm2vips
    if _newclass:ppm2vips = staticmethod(vimagemodule.VImage_ppm2vips)
    __swig_getmethods__["analyze2vips"] = lambda x: vimagemodule.VImage_analyze2vips
    if _newclass:analyze2vips = staticmethod(vimagemodule.VImage_analyze2vips)
    def recomb(*args): return vimagemodule.VImage_recomb(*args)
    def replicate(*args): return vimagemodule.VImage_replicate(*args)
    def ri2c(*args): return vimagemodule.VImage_ri2c(*args)
    def rot180(*args): return vimagemodule.VImage_rot180(*args)
    def rot270(*args): return vimagemodule.VImage_rot270(*args)
    def rot90(*args): return vimagemodule.VImage_rot90(*args)
    def scale(*args): return vimagemodule.VImage_scale(*args)
    def scaleps(*args): return vimagemodule.VImage_scaleps(*args)
    def rightshift_size(*args): return vimagemodule.VImage_rightshift_size(*args)
    def slice(*args): return vimagemodule.VImage_slice(*args)
    def subsample(*args): return vimagemodule.VImage_subsample(*args)
    def system(*args): return vimagemodule.VImage_system(*args)
    def tbjoin(*args): return vimagemodule.VImage_tbjoin(*args)
    __swig_getmethods__["text"] = lambda x: vimagemodule.VImage_text
    if _newclass:text = staticmethod(vimagemodule.VImage_text)
    def thresh(*args): return vimagemodule.VImage_thresh(*args)
    __swig_getmethods__["tiff2vips"] = lambda x: vimagemodule.VImage_tiff2vips
    if _newclass:tiff2vips = staticmethod(vimagemodule.VImage_tiff2vips)
    def vips2csv(*args): return vimagemodule.VImage_vips2csv(*args)
    def vips2jpeg(*args): return vimagemodule.VImage_vips2jpeg(*args)
    def vips2mask(*args): return vimagemodule.VImage_vips2mask(*args)
    def vips2mimejpeg(*args): return vimagemodule.VImage_vips2mimejpeg(*args)
    def vips2png(*args): return vimagemodule.VImage_vips2png(*args)
    def vips2ppm(*args): return vimagemodule.VImage_vips2ppm(*args)
    def vips2tiff(*args): return vimagemodule.VImage_vips2tiff(*args)
    def wrap(*args): return vimagemodule.VImage_wrap(*args)
    def zoom(*args): return vimagemodule.VImage_zoom(*args)
    def addgnoise(*args): return vimagemodule.VImage_addgnoise(*args)
    def compass(*args): return vimagemodule.VImage_compass(*args)
    def contrast_surface(*args): return vimagemodule.VImage_contrast_surface(*args)
    def contrast_surface_raw(*args): return vimagemodule.VImage_contrast_surface_raw(*args)
    def conv(*args): return vimagemodule.VImage_conv(*args)
    def conv_raw(*args): return vimagemodule.VImage_conv_raw(*args)
    def convf(*args): return vimagemodule.VImage_convf(*args)
    def convf_raw(*args): return vimagemodule.VImage_convf_raw(*args)
    def convsep(*args): return vimagemodule.VImage_convsep(*args)
    def convsep_raw(*args): return vimagemodule.VImage_convsep_raw(*args)
    def convsepf(*args): return vimagemodule.VImage_convsepf(*args)
    def convsepf_raw(*args): return vimagemodule.VImage_convsepf_raw(*args)
    def convsub(*args): return vimagemodule.VImage_convsub(*args)
    def embed(*args): return vimagemodule.VImage_embed(*args)
    def fastcor(*args): return vimagemodule.VImage_fastcor(*args)
    def fastcor_raw(*args): return vimagemodule.VImage_fastcor_raw(*args)
    __swig_getmethods__["gaussnoise"] = lambda x: vimagemodule.VImage_gaussnoise
    if _newclass:gaussnoise = staticmethod(vimagemodule.VImage_gaussnoise)
    def grad_x(*args): return vimagemodule.VImage_grad_x(*args)
    def grad_y(*args): return vimagemodule.VImage_grad_y(*args)
    def gradcor(*args): return vimagemodule.VImage_gradcor(*args)
    def gradcor_raw(*args): return vimagemodule.VImage_gradcor_raw(*args)
    def gradient(*args): return vimagemodule.VImage_gradient(*args)
    __swig_getmethods__["rank_image"] = lambda x: vimagemodule.VImage_rank_image
    if _newclass:rank_image = staticmethod(vimagemodule.VImage_rank_image)
    def lindetect(*args): return vimagemodule.VImage_lindetect(*args)
    __swig_getmethods__["maxvalue"] = lambda x: vimagemodule.VImage_maxvalue
    if _newclass:maxvalue = staticmethod(vimagemodule.VImage_maxvalue)
    def mpercent(*args): return vimagemodule.VImage_mpercent(*args)
    def phasecor_fft(*args): return vimagemodule.VImage_phasecor_fft(*args)
    def rank(*args): return vimagemodule.VImage_rank(*args)
    def rank_raw(*args): return vimagemodule.VImage_rank_raw(*args)
    def resize_linear(*args): return vimagemodule.VImage_resize_linear(*args)
    def sharpen(*args): return vimagemodule.VImage_sharpen(*args)
    def shrink(*args): return vimagemodule.VImage_shrink(*args)
    def spcor(*args): return vimagemodule.VImage_spcor(*args)
    def spcor_raw(*args): return vimagemodule.VImage_spcor_raw(*args)
    def stretch3(*args): return vimagemodule.VImage_stretch3(*args)
    def zerox(*args): return vimagemodule.VImage_zerox(*args)
    __swig_getmethods__["create_fmask"] = lambda x: vimagemodule.VImage_create_fmask
    if _newclass:create_fmask = staticmethod(vimagemodule.VImage_create_fmask)
    def disp_ps(*args): return vimagemodule.VImage_disp_ps(*args)
    def flt_image_freq(*args): return vimagemodule.VImage_flt_image_freq(*args)
    __swig_getmethods__["fractsurf"] = lambda x: vimagemodule.VImage_fractsurf
    if _newclass:fractsurf = staticmethod(vimagemodule.VImage_fractsurf)
    def freqflt(*args): return vimagemodule.VImage_freqflt(*args)
    def fwfft(*args): return vimagemodule.VImage_fwfft(*args)
    def rotquad(*args): return vimagemodule.VImage_rotquad(*args)
    def invfft(*args): return vimagemodule.VImage_invfft(*args)
    def invfftr(*args): return vimagemodule.VImage_invfftr(*args)
    def gammacorrect(*args): return vimagemodule.VImage_gammacorrect(*args)
    def heq(*args): return vimagemodule.VImage_heq(*args)
    def hist(*args): return vimagemodule.VImage_hist(*args)
    def histcum(*args): return vimagemodule.VImage_histcum(*args)
    def histeq(*args): return vimagemodule.VImage_histeq(*args)
    def histgr(*args): return vimagemodule.VImage_histgr(*args)
    def histnD(*args): return vimagemodule.VImage_histnD(*args)
    def histnorm(*args): return vimagemodule.VImage_histnorm(*args)
    def histplot(*args): return vimagemodule.VImage_histplot(*args)
    def histspec(*args): return vimagemodule.VImage_histspec(*args)
    def hsp(*args): return vimagemodule.VImage_hsp(*args)
    __swig_getmethods__["identity"] = lambda x: vimagemodule.VImage_identity
    if _newclass:identity = staticmethod(vimagemodule.VImage_identity)
    __swig_getmethods__["identity_ushort"] = lambda x: vimagemodule.VImage_identity_ushort
    if _newclass:identity_ushort = staticmethod(vimagemodule.VImage_identity_ushort)
    def ismonotonic(*args): return vimagemodule.VImage_ismonotonic(*args)
    def lhisteq(*args): return vimagemodule.VImage_lhisteq(*args)
    def lhisteq_raw(*args): return vimagemodule.VImage_lhisteq_raw(*args)
    __swig_getmethods__["invertlut"] = lambda x: vimagemodule.VImage_invertlut
    if _newclass:invertlut = staticmethod(vimagemodule.VImage_invertlut)
    __swig_getmethods__["buildlut"] = lambda x: vimagemodule.VImage_buildlut
    if _newclass:buildlut = staticmethod(vimagemodule.VImage_buildlut)
    def maplut(*args): return vimagemodule.VImage_maplut(*args)
    def project(*args): return vimagemodule.VImage_project(*args)
    def stdif(*args): return vimagemodule.VImage_stdif(*args)
    def stdif_raw(*args): return vimagemodule.VImage_stdif_raw(*args)
    def tone_analyse(*args): return vimagemodule.VImage_tone_analyse(*args)
    __swig_getmethods__["tone_build"] = lambda x: vimagemodule.VImage_tone_build
    if _newclass:tone_build = staticmethod(vimagemodule.VImage_tone_build)
    __swig_getmethods__["tone_build_range"] = lambda x: vimagemodule.VImage_tone_build_range
    if _newclass:tone_build_range = staticmethod(vimagemodule.VImage_tone_build_range)
    def tone_map(*args): return vimagemodule.VImage_tone_map(*args)
    def circle(*args): return vimagemodule.VImage_circle(*args)
    def flood_blob_copy(*args): return vimagemodule.VImage_flood_blob_copy(*args)
    def insertplace(*args): return vimagemodule.VImage_insertplace(*args)
    def line(*args): return vimagemodule.VImage_line(*args)
    def lineset(*args): return vimagemodule.VImage_lineset(*args)
    __swig_getmethods__["binfile"] = lambda x: vimagemodule.VImage_binfile
    if _newclass:binfile = staticmethod(vimagemodule.VImage_binfile)
    def cache(*args): return vimagemodule.VImage_cache(*args)
    def header_get_type(*args): return vimagemodule.VImage_header_get_type(*args)
    def header_int(*args): return vimagemodule.VImage_header_int(*args)
    def header_double(*args): return vimagemodule.VImage_header_double(*args)
    def header_string(*args): return vimagemodule.VImage_header_string(*args)
    def cntlines(*args): return vimagemodule.VImage_cntlines(*args)
    def dilate(*args): return vimagemodule.VImage_dilate(*args)
    def dilate_raw(*args): return vimagemodule.VImage_dilate_raw(*args)
    def erode(*args): return vimagemodule.VImage_erode(*args)
    def erode_raw(*args): return vimagemodule.VImage_erode_raw(*args)
    def profile(*args): return vimagemodule.VImage_profile(*args)
    def affine(*args): return vimagemodule.VImage_affine(*args)
    def align_bands(*args): return vimagemodule.VImage_align_bands(*args)
    def correl(*args): return vimagemodule.VImage_correl(*args)
    def _find_lroverlap(*args): return vimagemodule.VImage__find_lroverlap(*args)
    def _find_tboverlap(*args): return vimagemodule.VImage__find_tboverlap(*args)
    def global_balance(*args): return vimagemodule.VImage_global_balance(*args)
    def global_balancef(*args): return vimagemodule.VImage_global_balancef(*args)
    def lrmerge(*args): return vimagemodule.VImage_lrmerge(*args)
    def lrmerge1(*args): return vimagemodule.VImage_lrmerge1(*args)
    def lrmosaic(*args): return vimagemodule.VImage_lrmosaic(*args)
    def lrmosaic1(*args): return vimagemodule.VImage_lrmosaic1(*args)
    def match_linear(*args): return vimagemodule.VImage_match_linear(*args)
    def match_linear_search(*args): return vimagemodule.VImage_match_linear_search(*args)
    def maxpos_subpel(*args): return vimagemodule.VImage_maxpos_subpel(*args)
    def remosaic(*args): return vimagemodule.VImage_remosaic(*args)
    def similarity_area(*args): return vimagemodule.VImage_similarity_area(*args)
    def similarity(*args): return vimagemodule.VImage_similarity(*args)
    def tbmerge(*args): return vimagemodule.VImage_tbmerge(*args)
    def tbmerge1(*args): return vimagemodule.VImage_tbmerge1(*args)
    def tbmosaic(*args): return vimagemodule.VImage_tbmosaic(*args)
    def tbmosaic1(*args): return vimagemodule.VImage_tbmosaic1(*args)
    def benchmark(*args): return vimagemodule.VImage_benchmark(*args)
    def benchmark2(*args): return vimagemodule.VImage_benchmark2(*args)
    def benchmarkn(*args): return vimagemodule.VImage_benchmarkn(*args)
    __swig_getmethods__["eye"] = lambda x: vimagemodule.VImage_eye
    if _newclass:eye = staticmethod(vimagemodule.VImage_eye)
    __swig_getmethods__["grey"] = lambda x: vimagemodule.VImage_grey
    if _newclass:grey = staticmethod(vimagemodule.VImage_grey)
    __swig_getmethods__["feye"] = lambda x: vimagemodule.VImage_feye
    if _newclass:feye = staticmethod(vimagemodule.VImage_feye)
    __swig_getmethods__["fgrey"] = lambda x: vimagemodule.VImage_fgrey
    if _newclass:fgrey = staticmethod(vimagemodule.VImage_fgrey)
    __swig_getmethods__["fzone"] = lambda x: vimagemodule.VImage_fzone
    if _newclass:fzone = staticmethod(vimagemodule.VImage_fzone)
    __swig_getmethods__["make_xy"] = lambda x: vimagemodule.VImage_make_xy
    if _newclass:make_xy = staticmethod(vimagemodule.VImage_make_xy)
    __swig_getmethods__["zone"] = lambda x: vimagemodule.VImage_zone
    if _newclass:zone = staticmethod(vimagemodule.VImage_zone)
    def blend(*args): return vimagemodule.VImage_blend(*args)
    def equal(*args): return vimagemodule.VImage_equal(*args)
    def ifthenelse(*args): return vimagemodule.VImage_ifthenelse(*args)
    def less(*args): return vimagemodule.VImage_less(*args)
    def lesseq(*args): return vimagemodule.VImage_lesseq(*args)
    def more(*args): return vimagemodule.VImage_more(*args)
    def moreeq(*args): return vimagemodule.VImage_moreeq(*args)
    def notequal(*args): return vimagemodule.VImage_notequal(*args)
    __swig_getmethods__["video_test"] = lambda x: vimagemodule.VImage_video_test
    if _newclass:video_test = staticmethod(vimagemodule.VImage_video_test)
    __swig_getmethods__["video_v4l1"] = lambda x: vimagemodule.VImage_video_v4l1
    if _newclass:video_v4l1 = staticmethod(vimagemodule.VImage_video_v4l1)
    def tobuffer(*args): return vimagemodule.VImage_tobuffer(*args)
    __swig_getmethods__["frombuffer"] = lambda x: vimagemodule.VImage_frombuffer
    if _newclass:frombuffer = staticmethod(vimagemodule.VImage_frombuffer)
    def tostring(*args): return vimagemodule.VImage_tostring(*args)
    __swig_getmethods__["fromstring"] = lambda x: vimagemodule.VImage_fromstring
    if _newclass:fromstring = staticmethod(vimagemodule.VImage_fromstring)
VImage_swigregister = vimagemodule.VImage_swigregister
VImage_swigregister(VImage)
VImage_print_all = vimagemodule.VImage_print_all
VImage_convert2disc = vimagemodule.VImage_convert2disc
VImage_linreg = vimagemodule.VImage_linreg
VImage_black = vimagemodule.VImage_black
VImage_csv2vips = vimagemodule.VImage_csv2vips
VImage_gbandjoin = vimagemodule.VImage_gbandjoin
VImage_jpeg2vips = vimagemodule.VImage_jpeg2vips
VImage_magick2vips = vimagemodule.VImage_magick2vips
VImage_mask2vips = vimagemodule.VImage_mask2vips
VImage_png2vips = vimagemodule.VImage_png2vips
VImage_exr2vips = vimagemodule.VImage_exr2vips
VImage_ppm2vips = vimagemodule.VImage_ppm2vips
VImage_analyze2vips = vimagemodule.VImage_analyze2vips
VImage_text = vimagemodule.VImage_text
VImage_tiff2vips = vimagemodule.VImage_tiff2vips
VImage_gaussnoise = vimagemodule.VImage_gaussnoise
VImage_rank_image = vimagemodule.VImage_rank_image
VImage_maxvalue = vimagemodule.VImage_maxvalue
VImage_create_fmask = vimagemodule.VImage_create_fmask
VImage_fractsurf = vimagemodule.VImage_fractsurf
VImage_identity = vimagemodule.VImage_identity
VImage_identity_ushort = vimagemodule.VImage_identity_ushort
VImage_invertlut = vimagemodule.VImage_invertlut
VImage_buildlut = vimagemodule.VImage_buildlut
VImage_tone_build = vimagemodule.VImage_tone_build
VImage_tone_build_range = vimagemodule.VImage_tone_build_range
VImage_binfile = vimagemodule.VImage_binfile
VImage_eye = vimagemodule.VImage_eye
VImage_grey = vimagemodule.VImage_grey
VImage_feye = vimagemodule.VImage_feye
VImage_fgrey = vimagemodule.VImage_fgrey
VImage_fzone = vimagemodule.VImage_fzone
VImage_make_xy = vimagemodule.VImage_make_xy
VImage_zone = vimagemodule.VImage_zone
VImage_video_test = vimagemodule.VImage_video_test
VImage_video_v4l1 = vimagemodule.VImage_video_v4l1
VImage_frombuffer = vimagemodule.VImage_frombuffer
VImage_fromstring = vimagemodule.VImage_fromstring

im_init_world = vimagemodule.im_init_world
im__print_all = vimagemodule.im__print_all
im_col_Lab2XYZ = vimagemodule.im_col_Lab2XYZ
# try to guess a PIL mode string from a VIPS image
def PIL_mode_from_vips (vim):
  if vim.Bands () == 3 and vim.BandFmt () == VImage.FMTUCHAR:
    return 'RGB'
  elif vim.Bands () == 4 and vim.BandFmt () == VImage.FMTUCHAR and vim.Type == VImage.VImage.RGB:
    return 'RGBA'
  elif vim.Bands () == 4 and vim.BandFmt () == VImage.FMTUCHAR and vim.Type == VImage.CMYK:
    return 'CMYK'
  elif vim.Bands () == 1 and vim.BandFmt () == VImage.FMTUCHAR:
    return 'L'
  elif vim.Bands () == 1 and vim.BandFmt () == VImage.FMTINT:
    return 'I'
  elif vim.Bands () == 1 and vim.BandFmt () == VImage.FMTFLOAT:
    return 'F'
  elif vim.Bands () == 2 and vim.BandFmt () == VImage.FMTUCHAR:
    return 'LA'
  else:
    raise ValueError ('unsupported vips -> pil image')

# return vips (bands, format, type) for a PIL mode
def vips_from_PIL_mode (mode):
  if mode == 'RGB':
    return (3, VImage.FMTUCHAR, VImage.RGB)
  elif mode == 'RGBA':
    return (4, VImage.FMTUCHAR, VImage.RGB)
  elif mode == 'CMYK':
    return (4, VImage.FMTUCHAR, VImage.CMYK)
  elif mode == 'L':
    return (1, VImage.FMTUCHAR, VImage.B_W)
  elif mode == 'I':
    return (1, VImage.FMTINT, VImage.B_W)
  elif mode == 'F':
    return (1, VImage.FMTFLOAT, VImage.B_W)
  elif mode == 'LA':
    return (2, VImage.FMTUCHAR, VImage.B_W)
  else:
    raise ValueError ('unsupported pil -> vips image')



